plot.background = element_blank(),
panel.background = element_rect(fill = 'aliceblue'),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(
angle = 45,
vjust = 1,
hjust = 1,
size = 8
),
axis.text.y = element_text(size = 8)
)
bath2.df %>%
mutate(col=case_when(elev < 0 ~ "blue",
elev > 0 & elev < 3~ "red",
elev > 0.7  ~ "brown")) %>%
ggplot() +
geom_tile(aes(x = x, y = y, fill =col)) +
scale_fill_manual(values=c("cyan", "red", "green"))  +
coord_fixed()+
theme(
legend.title = element_blank(),
plot.background = element_blank(),
panel.background = element_rect(fill = 'aliceblue'),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(
angle = 45,
vjust = 1,
hjust = 1,
size = 8
),
axis.text.y = element_text(size = 8)
)
bath2.df %>%
mutate(col=case_when(elev < 0 ~ "blue",
elev > 0 & elev < 3~ "red",
elev > 0.7  ~ "brown")) %>%
ggplot() +
geom_tile(aes(x = x, y = y, fill =col)) +
scale_fill_manual(values=c(NA, "red", "green"))  +
coord_fixed()+
theme(
legend.title = element_blank(),
plot.background = element_blank(),
panel.background = element_rect(fill = 'aliceblue'),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(
angle = 45,
vjust = 1,
hjust = 1,
size = 8
),
axis.text.y = element_text(size = 8)
)
bath2.df %>%
mutate(col=case_when(elev < 0 ~ "blue",
elev > 0 & elev < 5~ "red",
elev > 0.7  ~ "brown")) %>%
ggplot() +
geom_tile(aes(x = x, y = y, fill =col)) +
scale_fill_manual(values=c(NA, "red", "green"))  +
coord_fixed()+
theme(
legend.title = element_blank(),
plot.background = element_blank(),
panel.background = element_rect(fill = 'aliceblue'),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(
angle = 45,
vjust = 1,
hjust = 1,
size = 8
),
axis.text.y = element_text(size = 8)
)
bath2.df %>%
mutate(col=case_when(elev < 0 ~ "blue",
elev > 0 & elev < 20~ "red",
elev > 0.7  ~ "brown")) %>%
ggplot() +
geom_tile(aes(x = x, y = y, fill =col)) +
scale_fill_manual(values=c(NA, "red", "green"))  +
coord_fixed()+
theme(
legend.title = element_blank(),
plot.background = element_blank(),
panel.background = element_rect(fill = 'aliceblue'),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(
angle = 45,
vjust = 1,
hjust = 1,
size = 8
),
axis.text.y = element_text(size = 8)
)
bath2.df %>%
ggplot() +
geom_tile(aes(x = x, y = y, fill = elev)) +
geom_contour(aes(x = x, y = y, z = elev), color = "black") +
scale_fill_gradientn(colours=c(bl,"white", re), na.value = "grey98",
limits = c(-2000, 2000))  +
coord_fixed()+
theme(
legend.title = element_blank(),
plot.background = element_blank(),
panel.background = element_rect(fill = 'aliceblue'),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(
angle = 45,
vjust = 1,
hjust = 1,
size = 8
),
axis.text.y = element_text(size = 8)
)
library(cavaR)
usethis::use_pkgdown()
pkgdown::build_site()
usethis::use_pkgdown_github_pages()
usethis::use_pkgdown_github_pages()
library(cavaR)
usethis::use_pkgdown()
pkgdown::build_site()
usethis::use_pkgdown_github_pages()
pkgdown::clean_site()
usethis::use_pkgdown()
pkgdown::build_site()
usethis::use_pkgdown_github_pages()
last_error()
last_error
rlang::last_error(
rlang::last_error()
rlang::last_error()
rlang::last_error()
rlang::last_trace()
pkgdown::build_site()
pkgdown::build_site()
library(cavaR)
?load_data
fpath <- system.file("extdata/", package="cavaR")
exmp1 <- load_data(country = "Moldova", variable="hurs", years.hist=2000, years.proj=2010,
path.to.data = fpath)
fpath <- system.file("extdata/", package="cavaR")
exmp1 <- load_data(country = "Moldova", variable="hurs", years.hist=2000, years.proj=2010,
path.to.data = fpath)
library(cavaR)
library(cavaR)
?load_data
fpath <- system.file("extdata/", package="cavaR")
exmp1 <- load_data(country = "Moldova", variable="hurs", years.hist=2000, years.proj=2010,
path.to.data = fpath)
load_data <- function(
path.to.data,
country,
variable,
xlim=NULL,
ylim=NULL,
years.proj,
years.hist=NULL,
path.to.obs=NULL,
n.cores=3,
buffer=0,
domain=NULL) {
# stop and warnings ####
if(path.to.data!="CORDEX-CORE" & str_detect(path.to.data, "/")) {
if (!any(str_detect(list.files(path.to.data), "historical")) & is.null(years.hist)) {
warning("Historical simulation rounds not found. If present, the folder needs to be named historical")
} else if (!any(str_detect(list.files(path.to.data), "historical")) & !is.null(years.hist)) {
stop("Historical simulation rounds not found. The folder needs to be named historical")
} else {
message("Your directory contains the following folders: \n", paste(list.dirs(path.to.data)[-1], "\n"), "all files within the listed folders will be uploaded \n")
files <- list.dirs(path.to.data, full.names = TRUE)[-1] %>%
map(., ~ list.files(.x, full.names = TRUE))
forcing =list.dirs(path.to.data, full.names = F)[-1]
}
} else if (path.to.data=="CORDEX-CORE") {
start <-  "CORDEX-"
domain <-  domain
GCM= c("_MOHC-HadGEM2-ES_", "_MPI-M-MPI-ESM-MR_", "_NCC-NorESM1-M_")
forcing= c("historical", "RCP26", "RCP85")
RCM= c("_r1i1p1_ICTP-RegCM4-7_v0" )
files= map(forcing, ~ paste0(GCM, .x)) %>%
map(., ~ paste0(start, domain, .x, RCM))
} else {
stop(" either specify a valid path or CORDEX-CORE for remote upload")
}
if (!is.null(path.to.obs)) {
obs.file <- ifelse(path.to.obs=="W5E5", "W5E5", list.files(path.to.obs, full.names = TRUE) )
}
# geolocalization ####
options(warn=-1)
if (!is.null(country) & !is.null(xlim)) {
stop("Either select a country or a region of interest, not both")
} else {
country_shp = if (!is.null(country))
raster::getData("GADM", country = country, level = 1)
else
as(extent(min(xlim), max(xlim), min(ylim), max(ylim)), "SpatialPolygons")
raster::crs(country_shp) = sp::CRS("+init=epsg:4326")
xlim <-
c(round(country_shp@bbox[1, 1] - buffer),
round(country_shp@bbox[1, 2] + buffer))  # longitude boundaries for the region of seasonerest
ylim <-
c(round(country_shp@bbox[2, 1] - buffer),
# latitude boundaries for the region of seasonerest
round(country_shp@bbox[2, 2] + buffer))
}
range.x <- max(xlim) - min(xlim)
range.y <-  max(ylim) - min(ylim)
options(warn=1)
# number of cores ####
future::plan(multisession, workers = n.cores)
# making the dataset ####
models.df = tibble(path= files, forcing=forcing) %>%
mutate(
models = future_map(path,  ~ future_map(.x, function(x)  {
if (str_detect(x, "historical")) {
message(Sys.time(), " Loading ", x)
data <- suppressMessages(loadGridData(
dataset = x,
var = variable,
years = years.hist,
lonLim = xlim,
latLim = ylim,
season = 1:12
))
message(Sys.time(), " Done")
return(data)
} else {
message(Sys.time(), " Loading ", x)
data <- suppressMessages(loadGridData(
dataset = x,
var = variable,
years = years.proj,
lonLim = xlim,
latLim = ylim,
season = 1:12
))
message(Sys.time(), " Done")
return(data)
}
})))
message(paste("\n", Sys.time(), "Aggregating members \n"))
models.df2 <- models.df %>%
mutate(models_mbrs = lapply(models, function(x)
common_dates(x))) %>%
{if (!is.null(path.to.obs)) {
mutate(., obs = list(suppressMessages(
loadGridData(
obs.file,
var = variable,
years = years.hist,
lonLim = xlim,
latLim = ylim,
season = 1:12
)
)))
} else {.}} %>%
dplyr::select(-models, -path)
models <- models.df %>%
dplyr::select(path)
message(paste(Sys.time(), "Done"))
rm(models.df)
gc()
return(list(models.df2, country_shp, as.character(models), "C4R.dataframe"))
} # end of function
future::plan(multisession, workers = n.cores)
future::plan(multisession, workers =2)
library(furrr)
future::plan(multisession, workers =2)
furrr::plan(multisession, workers =2)
future::plan(multisession, workers =2)
exmp1 <- load_data(country = "Moldova", variable="hurs", years.hist=2000, years.proj=2010,
path.to.data = fpath)
library(cavaR)
library(cavaR)
library(cavaR)
fpath <- system.file("extdata/", package="cavaR")
exmp1 <- load_data(country = "Moldova", variable="hurs", years.hist=2000, years.proj=2010,
path.to.data = fpath)
library(cavaR)
library(cavaR)
future::plan(multisession, workers=2)
fpath <- system.file("extdata/", package="cavaR")
exmp1 <- load_data(country = "Moldova", variable="hurs", years.hist=2000, years.proj=2010,
path.to.data = fpath)
library(cavaR)
library(cavaR)
fpath <- system.file("extdata/", package="cavaR")
exmp1 <- load_data(country = "Moldova", variable="hurs", years.hist=2000, years.proj=2010,
path.to.data = fpath)
library(cavaR)
fpath <- system.file("extdata/", package="cavaR")
exmp1 <- load_data(country = "Moldova", variable="hurs", years.hist=2000, years.proj=2010,
path.to.data = fpath)
exmp1 <- load_data(country = "Moldova", variable="hurs", years.hist=2000, years.proj=2010,
path.to.data = fpath, n.cores = 2)
plan(multisession, workers=2)
future::plan(multisession, workers=2)
future::plan(multisession, workers=2)
library(furrr)
future::plan(multisession, workers=2)
library(cavaR)
library(cavaR)
library(cavaR)
fpath <- system.file("extdata/", package="cavaR")
exmp1 <- load_data(country = "Moldova", variable="hurs", years.hist=2000, years.proj=2010,
path.to.data = fpath, n.cores = 2)
exmp1 <- load_data(country = "Moldova", variable="hurs", years.hist=2000, years.proj=2010,
path.to.data = fpath)
exmp2 <- load_data(country = "Somalia", variable="tas", years.hist=2000, years.proj=2010,
path.to.data = "CORDEX-CORE", domain="AFR-22")
load_data <- function(
path.to.rcps,
country,
variable,
xlim=NULL,
ylim=NULL,
years.proj,
years.hist,
path.to.obs=NULL,
n.cores=NULL,
buffer=0,
domain=NULL) {
# stop and warnings ####
if(path.to.rcps!="CORDEX-CORE" & str_detect(path.to.rcps, "/")) {
if (!any(str_detect(list.files(path.to.rcps), "stor"))) {
stop("Please add the historical simulations rounds of your model. The folder name needs to contain at least the letters stor")
}
if (length(list.files(path.to.rcps)) >= 2) message("Your directory contains the following folders: \n", paste(list.dirs(path.to.rcps)[-1], "\n"), "all files within the listed folders will be uploaded \n")
files <- list.dirs(path.to.rcps, full.names = TRUE)[-1] %>%
map(., ~ list.files(.x, full.names = TRUE))
RCP =list.dirs(path.to.rcps, full.names = F)[-1]
} else if (path.to.rcps=="CORDEX-CORE") {
start <-  "CORDEX-"
domain <-  domain
GCM= c("_MOHC-HadGEM2-ES_", "_MPI-M-MPI-ESM-MR_", "_NCC-NorESM1-M_")
RCP= c("historical", "rcp26", "rcp85")
RCM= c("_r1i1p1_ICTP-RegCM4-7_v0" )
files= map(RCP, ~ paste0(GCM, .x)) %>%
map(., ~ paste0(start, domain, .x, RCM))
} else {
stop(" either specify a valid path or CORDEX-CORE for remote upload")
}
if (!is.null(path.to.obs)) {
obs.file <- ifelse(path.to.obs=="W5E5", "W5E5", list.files(path.to.obs, full.names = TRUE) )
}  else {
warning("if you do not specify a reanalysis/observational gridded dataset, bias-correction cannot be performed. To load W5E5 set path.to.obs as W5E5 \n")
}
# geolocalization ####
options(warn=-1)
if (!is.null(country) & !is.null(xlim)) {
stop("Either select a country or a region of interest, not both")
} else {
country_shp = if (!is.null(country))
raster::getData("GADM", country = country, level = 1)
else
as(extent(min(xlim), max(xlim), min(ylim), max(ylim)), "SpatialPolygons")
raster::crs(country_shp) = sp::CRS("+init=epsg:4326")
xlim <-
c(round(country_shp@bbox[1, 1] - buffer),
round(country_shp@bbox[1, 2] + buffer))  # longitude boundaries for the region of seasonerest
ylim <-
c(round(country_shp@bbox[2, 1] - buffer),
# latitude boundaries for the region of seasonerest
round(country_shp@bbox[2, 2] + buffer))
}
range.x <- max(xlim) - min(xlim)
range.y <-  max(ylim) - min(ylim)
options(warn=1)
# number of cores ####
if (is.null(n.cores)) {
future::plan(
list(
future::tweak(
future::multisession,
workers = 3),
future::tweak(
future::multisession,
workers = 3),
future::tweak(
future::multisession,
workers = 3)
)
)
answer <- readline("The process is currently parallelized using 9 cores. Type TRUE to continue or set the argument n.cores \n")
ifelse(answer, " ", stop("set number of cores"))
}  else {
future::plan(multisession, workers = n.cores)
}
# making the dataset ####
models.df = tibble(path= files, RCP=RCP) %>%
mutate(
models = future_map(path,  ~ future_map(.x, function(x)  {
if (str_detect(x, "historical")) {
message(Sys.time(), " Loading ", x)
data <- suppressMessages(loadGridData(
dataset = x,
var = variable,
years = years.hist,
lonLim = xlim,
latLim = ylim,
season = 1:12
))
message(Sys.time(), " Done")
return(data)
} else {
message(Sys.time(), " Loading ", x)
data <- suppressMessages(loadGridData(
dataset = x,
var = variable,
years = years.proj,
lonLim = xlim,
latLim = ylim,
season = 1:12
))
message(Sys.time(), " Done")
return(data)
}
})))
message(paste("\n", Sys.time(), "Aggregating members \n"))
models.df2 <- models.df %>%
mutate(models_mbrs = lapply(models, function(x)
common_dates(x))) %>%
{if (!is.null(path.to.obs)) {
mutate(., obs = list(suppressMessages(
loadGridData(
obs.file,
var = variable,
years = years.hist,
lonLim = xlim,
latLim = ylim,
season = 1:12
)
)))
} else {.}} %>%
dplyr::select(-models, -path)
models <- models.df %>%
dplyr::select(path)
message(paste(Sys.time(), "Done"))
rm(models.df)
gc()
return(list(models.df2, country_shp, as.character(models), "C4R.dataframe"))
} # end of function
exmp2 <- load_data(country = "Somalia", variable="tas", years.hist=2000, years.proj=2010,
path.to.data = "CORDEX-CORE", domain="AFR-22")
exmp2 <- load_data(country = "Somalia", variable="tas", years.hist=2000, years.proj=2010,
path.to.rcps =  = "CORDEX-CORE", domain="AFR-22")
exmp2 <- load_data(country = "Somalia", variable="tas", years.hist=2000, years.proj=2010,
path.to.rcps =  = "CORDEX-CORE", domain="AFR-22")
exmp2 <- load_data(country = "Somalia", variable="tas", years.hist=2000, years.proj=2010,
path.to.rcps = "CORDEX-CORE", domain="AFR-22")
library(tidyverse)
library(furrr)
exmp2 <- load_data(country = "Somalia", variable="tas", years.hist=2000, years.proj=2010,
path.to.rcps = "CORDEX-CORE", domain="AFR-22")
library(cavaR)
library(cavaR)
exmp2 <- load_data(country = "Somalia", variable="tas", years.hist=2000, years.proj=2010,
path.to.rcps = "CORDEX-CORE", domain="AFR-22")
library(cavaR)
rm(list=ls())
library(cavaR)
exmp2 <- load_data(country = "Somalia", variable="tas", years.hist=2000, years.proj=2010,
path.to.rcps = "CORDEX-CORE", domain="AFR-22")
exmp2 <- load_data(country = "Somalia", variable="tas", years.hist=2000, years.proj=2010,
path.to.data = "CORDEX-CORE", domain="AFR-22")
?projections
library(cavaR)
library(cavaR)
library(cavaR)
?projections
fpath <- system.file("extdata/", package="cavaR")
exmp <- load_data(country = "Moldova", variable="hurs", n.cores=6,
path.to.rcps = fpath) %>%
projections(., season = 1:12)
exmp <- load_data(country = "Moldova", variable="hurs", n.cores=6,
path.to.data = fpath) %>%
projections(., season = 1:12)
?load_data
fpath <- system.file("extdata/", package="cavaR")
exmp <- load_data(country = "Moldova", variable="hurs", years.hist=2000, years.proj=2010,
path.to.data = fpath) %>%
projections(., season = 1:12)
exmp <- load_data(country = "Moldova", variable="hurs", years.hist=2000, years.proj=2010,
path.to.data = fpath)
library(cavaR)
library(cavaR)
fpath <- system.file("extdata/", package="cavaR")
exmp <- load_data(country = "Moldova", variable="hurs", years.hist=2000, years.proj=2010,
path.to.data = fpath) %>%
projections(., season = 1:12)
library(cavaR)
library(cavaR)
?plotting
fpath <- system.file("extdata/", package="cavaR")
exmp <- load_data(country = "Moldova", variable="hurs", years.hist=2000, years.proj=2010, path.to.data = fpath) %>%
projections(., season = 1:12) %>%
plotting(plot_titles="hurs")
exmp
