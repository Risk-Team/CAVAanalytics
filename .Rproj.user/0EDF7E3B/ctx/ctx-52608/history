paste0("above ", uppert)
),
ifelse(bias.correction, " after bias-correction", "")
)
}
if (
(!is.null(uppert) |
!is.null(lowert)) & (consecutive & duration == "total")) {
mes = paste0(
var,
". Calculation of total total number of consecutive days with duration longer than 6 days, ",
ifelse(
!is.null(lowert),
paste0("below threshold of ", lowert),
paste0("above threshold of ", uppert)
),
ifelse(bias.correction, " after bias-correction", "")
)
}
# cores
future::plan(future::multisession, workers = 2)
# initialising
if (any(str_detect(colnames(datasets), "obs"))) {
datasets <- datasets %>%
mutate_at(c("models_mbrs", "obs"), ~ map(., ~ subsetGrid(., season =
season)))
} else {
datasets <- datasets %>%
mutate_at(c("models_mbrs"), ~ map(., ~ subsetGrid(., season =
season)))
}
message(Sys.time(),
" projections, season ",
glue_collapse(season, "-"),
". ",
mes)
data_list <- datasets %>%
filter(RCP != "historical") %>%
{
if (bias.correction) {
message(
paste(
Sys.time(),
" Performing bias correction with the",
method,
" method for each model separately and then calculating the ensemble mean. Season",
glue_collapse(season, "-")
)
)
mutate(.,
models_mbrs = future_map(models_mbrs, function(x) {
if (var == "pr") {
bc <-
downscaleR::biasCorrection(
y = obs[[1]],
x = filter(datasets, RCP == "historical")$models_mbrs[[1]],
newdata = x,
precipitation = TRUE,
method = method,
scaling.type = "multiplicative"
)
} else {
bc <-
downscaleR::biasCorrection(
y = obs[[1]],
x = filter(datasets, RCP == "historical")$models_mbrs[[1]],
newdata = x,
precipitation = FALSE,
method = method,
scaling.type = "additive"
)
}
out <-
transformeR::intersectGrid.time(x, bc, which.return = 2)
out$Dates$start <- x$Dates$start
out$Dates$end <-  x$Dates$end
return(out)
}))
} else
.
}  %>%  # computing annual aggregation. if threshold is specified, first apply threshold
mutate(
models_agg_y = future_map(models_mbrs, function(x)
suppressMessages(transformeR::aggregateGrid(# perform aggregation based on seasonended output
x, aggr.y =
if (var == "pr" &
!consecutive &
(is.null(uppert) & is.null(lowert))) {
list(FUN = "sum")
} else if (var != "pr" &
!consecutive &
(is.null(lowert) & is.null(uppert))) {
list(FUN = "mean")
} else if (consecutive) {
list(
FUN = thrs_consec,
duration = duration,
lowert = lowert,
uppert = uppert
)
} else if (!consecutive) {
list(FUN = thrs,
uppert = uppert,
lowert = lowert)
}))
),
rst = map2(RCP, models_agg_y, function(x, y) {
y <- suppressMessages(transformeR::aggregateGrid(y, aggr.mem = list(FUN = "mean", na.rm = TRUE)))
arry_mean <-
apply(y$Data, c(2, 3), mean, na.rm = TRUE)
y$Data <- arry_mean
rs <- make_raster(y)
names(rs) <- paste0(x, "_", names(rs)) %>%  str_remove(., "X")
return(rs)
})
)
rst=stack(data_list$rst) %>%
crop(., country_shp, snap = "out") %>%
mask(., country_shp) %>%
stack()
return(rst)
}
rst <- projections(data = exmp1, bias.correction = F, consecutive = F, season = 1:12)
names(out)
projections <-
function(data,
bias.correction=F,
uppert = NULL,
lowert = NULL,
season,
method = "scaling",
consecutive = FALSE,
duration = "max") {
# checking inputs requirement
if (data[[4]] != "C4R.dataframe")
stop("The input data does not seem to be the output of the chatR loading function")
stopifnot(is.logical(consecutive),
is.logical(bias.correction))
if (!is.null(lowert) &
!is.null(uppert))
stop("select only one threshold")
if (consecutive &
(is.null(uppert)) &
is.null(lowert))
stop("Specify a threshold for which you want to calculate consecutive days")
stopifnot(duration == "max" | duration == "total")
if (!any(str_detect(colnames(data[[1]]),"obs"))) {
warning("Bias correction cannot be performed, set as F")
bias.correction=F
}
# retrieving information
mod.numb <- dim(data[[1]]$models_mbrs[[1]]$Data) [1]
datasets <- data[[1]]
country_shp <- data[[2]]
var <- datasets$models_mbrs[[1]]$Variable$varName
# messages
if (is.null(uppert) & is.null(lowert)) {
mes = paste0(
"Calculation of ",
ifelse(var == "pr", "total ", "mean "),
ifelse(bias.correction, "bias-corrected ", " "),
var
)
}
if ((!is.null(uppert) | !is.null(lowert)) & !consecutive) {
mes = paste0(
"Calculation of number of days with ",
var,
ifelse(
!is.null(lowert),
paste0(" below threshold of ", lowert),
paste0(" above threshold of ", uppert)
),
ifelse(bias.correction, " after bias-correction", "")
)
}
if ((!is.null(uppert) |
!is.null(lowert)) & (consecutive & duration == "max")) {
mes = paste0(
"Calculation of maximum length of consecutive number of days ",
ifelse(
!is.null(lowert),
paste0("below ", lowert),
paste0("above ", uppert)
),
ifelse(bias.correction, " after bias-correction", "")
)
}
if (
(!is.null(uppert) |
!is.null(lowert)) & (consecutive & duration == "total")) {
mes = paste0(
var,
". Calculation of total total number of consecutive days with duration longer than 6 days, ",
ifelse(
!is.null(lowert),
paste0("below threshold of ", lowert),
paste0("above threshold of ", uppert)
),
ifelse(bias.correction, " after bias-correction", "")
)
}
# cores
future::plan(future::multisession, workers = 2)
# initialising
if (any(str_detect(colnames(datasets), "obs"))) {
datasets <- datasets %>%
mutate_at(c("models_mbrs", "obs"), ~ map(., ~ subsetGrid(., season =
season)))
} else {
datasets <- datasets %>%
mutate_at(c("models_mbrs"), ~ map(., ~ subsetGrid(., season =
season)))
}
message(Sys.time(),
" projections, season ",
glue_collapse(season, "-"),
". ",
mes)
data_list <- datasets %>%
filter(RCP != "historical") %>%
{
if (bias.correction) {
message(
paste(
Sys.time(),
" Performing bias correction with the",
method,
" method for each model separately and then calculating the ensemble mean. Season",
glue_collapse(season, "-")
)
)
mutate(.,
models_mbrs = future_map(models_mbrs, function(x) {
if (var == "pr") {
bc <-
downscaleR::biasCorrection(
y = obs[[1]],
x = filter(datasets, RCP == "historical")$models_mbrs[[1]],
newdata = x,
precipitation = TRUE,
method = method,
scaling.type = "multiplicative"
)
} else {
bc <-
downscaleR::biasCorrection(
y = obs[[1]],
x = filter(datasets, RCP == "historical")$models_mbrs[[1]],
newdata = x,
precipitation = FALSE,
method = method,
scaling.type = "additive"
)
}
out <-
transformeR::intersectGrid.time(x, bc, which.return = 2)
out$Dates$start <- x$Dates$start
out$Dates$end <-  x$Dates$end
return(out)
}))
} else
.
}  %>%  # computing annual aggregation. if threshold is specified, first apply threshold
mutate(
models_agg_y = future_map(models_mbrs, function(x)
suppressMessages(transformeR::aggregateGrid(# perform aggregation based on seasonended output
x, aggr.y =
if (var == "pr" &
!consecutive &
(is.null(uppert) & is.null(lowert))) {
list(FUN = "sum")
} else if (var != "pr" &
!consecutive &
(is.null(lowert) & is.null(uppert))) {
list(FUN = "mean")
} else if (consecutive) {
list(
FUN = thrs_consec,
duration = duration,
lowert = lowert,
uppert = uppert
)
} else if (!consecutive) {
list(FUN = thrs,
uppert = uppert,
lowert = lowert)
}))
),
rst = map2(RCP, models_agg_y, function(x, y) {
y <- suppressMessages(transformeR::aggregateGrid(y, aggr.mem = list(FUN = "mean", na.rm = TRUE)))
arry_mean <-
apply(y$Data, c(2, 3), mean, na.rm = TRUE)
y$Data <- arry_mean
rs <- make_raster(y)
names(rs) <- paste0(x, "_", names(rs)) %>%  str_remove(., "X")
return(rs)
})
)
rst=stack(data_list$rst) %>%
crop(., country_shp, snap = "out") %>%
mask(., country_shp) %>%
stack()
return(rst)
}
rst <- projections(data = exmp1, bias.correction = F, consecutive = F, season = 1:12)
names(out)
make_raster <- function(cl4.object) {
if (length(dim(cl4.object$Data)) != 2)
stop("Your data needs to be a 2d array, check dimension")
rasters <- raster::raster(
cl4.object$Data,
xmn = min(cl4.object$xyCoords$x),
xmx = max(cl4.object$xyCoords$x),
ymn = min(cl4.object$xyCoords$y),
ymx = max(cl4.object$xyCoords$y)
) %>%
flip(., direction = 'y')
nms <-
paste0(
str_extract(cl4.object$Dates$start[1], "\\d{4}"),
"-",
str_extract(cl4.object$Dates$end[length(cl4.object$Dates$start)],  "\\d{4}")
)
names(rasters) <-  nms
raster::crs(rasters) <- sp::CRS("+init=epsg:4326")
return(rasters)
}
projections <-
function(data,
bias.correction=F,
uppert = NULL,
lowert = NULL,
season,
method = "scaling",
consecutive = FALSE,
duration = "max") {
# checking inputs requirement
if (data[[4]] != "C4R.dataframe")
stop("The input data does not seem to be the output of the chatR loading function")
stopifnot(is.logical(consecutive),
is.logical(bias.correction))
if (!is.null(lowert) &
!is.null(uppert))
stop("select only one threshold")
if (consecutive &
(is.null(uppert)) &
is.null(lowert))
stop("Specify a threshold for which you want to calculate consecutive days")
stopifnot(duration == "max" | duration == "total")
if (!any(str_detect(colnames(data[[1]]),"obs"))) {
warning("Bias correction cannot be performed, set as F")
bias.correction=F
}
# retrieving information
mod.numb <- dim(data[[1]]$models_mbrs[[1]]$Data) [1]
datasets <- data[[1]]
country_shp <- data[[2]]
var <- datasets$models_mbrs[[1]]$Variable$varName
# messages
if (is.null(uppert) & is.null(lowert)) {
mes = paste0(
"Calculation of ",
ifelse(var == "pr", "total ", "mean "),
ifelse(bias.correction, "bias-corrected ", " "),
var
)
}
if ((!is.null(uppert) | !is.null(lowert)) & !consecutive) {
mes = paste0(
"Calculation of number of days with ",
var,
ifelse(
!is.null(lowert),
paste0(" below threshold of ", lowert),
paste0(" above threshold of ", uppert)
),
ifelse(bias.correction, " after bias-correction", "")
)
}
if ((!is.null(uppert) |
!is.null(lowert)) & (consecutive & duration == "max")) {
mes = paste0(
"Calculation of maximum length of consecutive number of days ",
ifelse(
!is.null(lowert),
paste0("below ", lowert),
paste0("above ", uppert)
),
ifelse(bias.correction, " after bias-correction", "")
)
}
if (
(!is.null(uppert) |
!is.null(lowert)) & (consecutive & duration == "total")) {
mes = paste0(
var,
". Calculation of total total number of consecutive days with duration longer than 6 days, ",
ifelse(
!is.null(lowert),
paste0("below threshold of ", lowert),
paste0("above threshold of ", uppert)
),
ifelse(bias.correction, " after bias-correction", "")
)
}
# cores
future::plan(future::multisession, workers = 2)
# initialising
if (any(str_detect(colnames(datasets), "obs"))) {
datasets <- datasets %>%
mutate_at(c("models_mbrs", "obs"), ~ map(., ~ subsetGrid(., season =
season)))
} else {
datasets <- datasets %>%
mutate_at(c("models_mbrs"), ~ map(., ~ subsetGrid(., season =
season)))
}
message(Sys.time(),
" projections, season ",
glue_collapse(season, "-"),
". ",
mes)
data_list <- datasets %>%
filter(RCP != "historical") %>%
{
if (bias.correction) {
message(
paste(
Sys.time(),
" Performing bias correction with the",
method,
" method for each model separately and then calculating the ensemble mean. Season",
glue_collapse(season, "-")
)
)
mutate(.,
models_mbrs = future_map(models_mbrs, function(x) {
if (var == "pr") {
bc <-
downscaleR::biasCorrection(
y = obs[[1]],
x = filter(datasets, RCP == "historical")$models_mbrs[[1]],
newdata = x,
precipitation = TRUE,
method = method,
scaling.type = "multiplicative"
)
} else {
bc <-
downscaleR::biasCorrection(
y = obs[[1]],
x = filter(datasets, RCP == "historical")$models_mbrs[[1]],
newdata = x,
precipitation = FALSE,
method = method,
scaling.type = "additive"
)
}
out <-
transformeR::intersectGrid.time(x, bc, which.return = 2)
out$Dates$start <- x$Dates$start
out$Dates$end <-  x$Dates$end
return(out)
}))
} else
.
}  %>%  # computing annual aggregation. if threshold is specified, first apply threshold
mutate(
models_agg_y = future_map(models_mbrs, function(x)
suppressMessages(transformeR::aggregateGrid(# perform aggregation based on seasonended output
x, aggr.y =
if (var == "pr" &
!consecutive &
(is.null(uppert) & is.null(lowert))) {
list(FUN = "sum")
} else if (var != "pr" &
!consecutive &
(is.null(lowert) & is.null(uppert))) {
list(FUN = "mean")
} else if (consecutive) {
list(
FUN = thrs_consec,
duration = duration,
lowert = lowert,
uppert = uppert
)
} else if (!consecutive) {
list(FUN = thrs,
uppert = uppert,
lowert = lowert)
}))
),
rst = map2(RCP, models_agg_y, function(x, y) {
y <- suppressMessages(transformeR::aggregateGrid(y, aggr.mem = list(FUN = "mean", na.rm = TRUE)))
arry_mean <-
apply(y$Data, c(2, 3), mean, na.rm = TRUE)
y$Data <- arry_mean
rs <- make_raster(y)
names(rs) <- paste0(x, "_", names(rs)) %>%  str_remove(., "X")
return(rs)
})
)
rst=stack(data_list$rst) %>%
crop(., country_shp, snap = "out") %>%
mask(., country_shp) %>%
stack()
return(rst)
}
rst <- projections(data = exmp1, bias.correction = F, consecutive = F, season = 1:12)
names(out)
rm(list=ls())
